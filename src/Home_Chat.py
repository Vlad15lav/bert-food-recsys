import os
import re
import nltk
import gdown
import pickle
import pandas as pd
import numpy as np
import streamlit as st
import scipy.sparse as sparse
import zipfile

from config import CONFIG

from streamlit_chat import message

from nltk.corpus import stopwords
from pymystem3 import Mystem
from sklearn.metrics.pairwise import cosine_similarity

BOT_MESSAGE_TEMP = (
    "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞–∫–∏–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏:\n\n",
    "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n",
    "–•–æ—Ç–µ–ª –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, " +
    "–Ω–∞–ø—Ä–∏–º–µ—Ä...\n\n",
    "–ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã, " +
    "–≤–∫–ª—é—á–∞—è...\n\n",
    "–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –Ω–∞–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ...\n\n",
    "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ —Ç–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º:\n\n",
    "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ " +
    "—Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n\n",
    "–ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫—É—Å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö...\n\n",
    "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é " +
    "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n\n",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
    )

st.set_page_config(
        page_title="AI Chef | Chat",
        page_icon="üìù",
        layout="wide"
    )

if not (os.path.exists(CONFIG["DATA_ITEMS"]) and
        os.path.exists(CONFIG["TFIDF_ITEMS_PATH"]) and
        os.path.exists(CONFIG["TFIDF_FEATURES"])):

    gdown.download("https://drive.google.com/" +
                   "uc?id=17nDmHE84dT76vsVrq-5RaqrEoJBdFMV7",
                   "recsys_data.zip", quiet=False)

    with zipfile.ZipFile("recsys_data.zip", 'r') as zip_ref:
        zip_ref.extractall(".")


@st.cache_data
def load_model():
    data_items = pd.read_csv(CONFIG["DATA_ITEMS"])
    tfidf_embed_items = sparse.load_npz(CONFIG["TFIDF_ITEMS_PATH"])
    tfidf_model = pickle.load(open(CONFIG["TFIDF_FEATURES"], "rb"))

    nltk.download("stopwords")
    stopwords_ru = stopwords.words("russian")
    mystem = Mystem()
    return data_items, tfidf_embed_items, tfidf_model, stopwords_ru, mystem


def get_tfidf_recomendation(text, model, embed_items):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é TF-IDF
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    text = text.lower()
    text = re.sub(r'\([^()]*\)', '', text)
    text = re.sub(r'[^–∞-—è—ë]', ' ', text)
    text = re.sub(" +", " ", text)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    tokens = mystem.lemmatize(text)
    text = " ".join([token for token in tokens
                     if token not in stopwords_ru and
                     token != " " and len(token) > 1])

    # –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ TF-IDF –º–æ–¥–µ–ª–∏
    out = model.transform([text])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
    rating = cosine_similarity(embed_items, out).reshape(-1)
    rating_arg = np.argsort(rating)[::-1]

    return rating_arg


data_items, tfidf_embed_items, tfidf_model, stopwords_ru, mystem = load_model()


def main():
    st.title("AI Chef Chat")
    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
        st.write("AI Chef - —ç—Ç–æ —á–∞—Ç-–±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è " +
                 "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é " +
                 "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –±–ª—é–¥. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ " +
                 "–º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π " +
                 ", –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã, " +
                 "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∫—É—Å–∞–º –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º " +
                 "–∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ —á–∞—Ç –±—ã–ª —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω
    if "messages" not in st.session_state:
        st.session_state.messages = []
        start_message = "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì AI Chef. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ "\
            "—É–¥–æ–±–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞. "\
            "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, "\
            "–∞ —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ—Ü–µ–ø—Ç. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤: "\
            "¬´–ü—Ä–µ–¥–ª–æ–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤, "\
            "–ª—É–∫–∞ –∏ –∫—É—Ä–∏—Ü—ã¬ª –∏–ª–∏ ¬´–î–µ—Å–µ—Ä—Ç –∏–∑ —à–æ–∫–æ–ª–∞–¥–∞ –∏ —Ñ—Ä—É–∫—Ç–æ–≤¬ª."

        st.session_state.messages.append({"role": "assistant",
                                          "content": start_message})

    # –û—Ç–æ–±—Ä–æ–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    for i in range(len(st.session_state.messages)):
        msg = st.session_state.messages[i]
        if msg['role'] == 'assistant':
            message(msg['content'], key=str(i))
        else:
            message(msg['content'], is_user=True, key=str(i) + '_user')

    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∏–±—É–¥—å"):
        key_index = len(st.session_state.messages) + 1
        st.session_state.messages.append({"role": "user", "content": prompt})
        message(prompt, is_user=True, key=str(key_index) + '_user')

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç Chat –±–æ—Ç–∞
        rating_arg = get_tfidf_recomendation(prompt,
                                             tfidf_model,
                                             tfidf_embed_items)
        response = np.random.choice(BOT_MESSAGE_TEMP)
        for i in range(3):
            item_id = int(rating_arg[i])

            response += "–ù–∞–∑–≤–∞–Ω–∏–µ: {}\n–°–æ—Å—Ç–∞–≤: {}\n{}. –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {}" \
                .format(*data_items.loc[[item_id], [
                    'name',
                    'ingredient',
                    'type_kitchen',
                    'time_cook']
                ].values.reshape(-1))
            response += "\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–µ—Ü–µ–ø—Ç –ø–æ [—Å—Å—ã–ª–∫–µ]" \
                f"({data_items.loc[item_id, 'link']})\n\n"

        response = response.rstrip("\n\n")

        st.session_state.messages.append({"role": "assistant",
                                          "content": response})
        message(response, key=str(key_index))


if __name__ == "__main__":
    main()
